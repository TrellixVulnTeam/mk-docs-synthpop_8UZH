{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Synthpop Synthpop is a Synthetic-Data-Generation framework which allows you to create synthetic data-sets. The current framework is configured to support data generation on a district-level within India, but can be modified to support other data-sets as well. Pull requests are welcome at Synthpop . Project layout For more details on the project files see: Files - synthpop.py - IPU.py - age-height-weight.py - HlatHlongaddition.py - places.py - population_density_sampler.py","title":"Home"},{"location":"#synthpop","text":"Synthpop is a Synthetic-Data-Generation framework which allows you to create synthetic data-sets. The current framework is configured to support data generation on a district-level within India, but can be modified to support other data-sets as well. Pull requests are welcome at Synthpop .","title":"Synthpop"},{"location":"#project-layout","text":"For more details on the project files see: Files - synthpop.py - IPU.py - age-height-weight.py - HlatHlongaddition.py - places.py - population_density_sampler.py","title":"Project layout"},{"location":"about-mkdocs/","text":"","title":"About mkdocs"},{"location":"GS/AHW/","text":"Adding Age, Height, Weight attributes to the synthetic dataset age_height_weight.py helps us add age, height, and weight to the synthetic dataset. It has the following functions. def load_data(synthetic_pop:str,ihds:str) -> Tuple[DataFrame,DataFrame]: Loads the IHDS and synthetic population data. def modify_age_gender(synthetic_population:DataFrame) -> DataFrame: Adds age and gender labels in accordance to the values def renaming_columns(ihds_df:DataFrame) -> DataFrame: Selects a subset of relevant colums, and maps them to a better naming convetion def boundary_df(ihds_df:DataFrame, district:str) -> Tuple(DataFrame,DataFrame): Create a boundary dataframe according to district,sex def assign_height_weight(df:DataFrame, sex:str, parameter:str): Assign height and weight to individuals in proportion to age and gender","title":"age-height-weight.py"},{"location":"GS/AHW/#adding-age-height-weight-attributes-to-the-synthetic-dataset","text":"age_height_weight.py helps us add age, height, and weight to the synthetic dataset. It has the following functions. def load_data(synthetic_pop:str,ihds:str) -> Tuple[DataFrame,DataFrame]: Loads the IHDS and synthetic population data. def modify_age_gender(synthetic_population:DataFrame) -> DataFrame: Adds age and gender labels in accordance to the values def renaming_columns(ihds_df:DataFrame) -> DataFrame: Selects a subset of relevant colums, and maps them to a better naming convetion def boundary_df(ihds_df:DataFrame, district:str) -> Tuple(DataFrame,DataFrame): Create a boundary dataframe according to district,sex def assign_height_weight(df:DataFrame, sex:str, parameter:str): Assign height and weight to individuals in proportion to age and gender","title":"Adding  Age, Height, Weight attributes to the synthetic dataset"},{"location":"GS/IPU/","text":"IPU : Iterative Proportional Updating class IPU: def preprocess_individual_samples_ihds(self,filtered_ihds_individual_samples : DataFrame ) -> DataFrame : This function preprocesses the individual samples of the raw IHDS data. The attributes provided by IHDS_Survey are remapped to give clearer variable names to the attributes. The ages are binned according to 10 year gaps (0-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-90, 90-100). Each individual is assigned to a religion group based on the religion attribute. Each individual is assigned to a particular Caste based on the caste attribute. Each individual is assigned a job-label on the basis of activity status class IPU: def preprocess_households_samples_ihds(self,filtered_ihds_households_data : DataFrame ) -> DataFrame : This function preprocesses the household samples of the raw IHDS data. The attributes provided by IHDS_Survey are remapped to give clearer variable names to the attributes. Households are classified on the basis of rural/urban status. Households are classified on the basis of household size. class IPU: def load_marginals(self,householdh_marginal_filename:str, individuals_marginal_filename:str, individuals_data:DataFrame, households_data:DataFrame) -> Tuple(DataFrame,DataFrame,list) : This function loads and preprocesses the households and individual marginals from the respective files. class IPU: def generate_data(self,householdh_marginal_filename:str, filtered_ihds_individuals_data: DataFrame, filtered_ihds_households_data: DataFrame, householdh_marginal_filename: str, individuals_marginal_filename: str) -> Tuple(DataFrame,DataFrame,DataFrame) : This function generates the synthetic population data from the marginal files and the ihds data.","title":"IPU.py"},{"location":"GS/IPU/#ipu-iterative-proportional-updating","text":"class IPU: def preprocess_individual_samples_ihds(self,filtered_ihds_individual_samples : DataFrame ) -> DataFrame : This function preprocesses the individual samples of the raw IHDS data. The attributes provided by IHDS_Survey are remapped to give clearer variable names to the attributes. The ages are binned according to 10 year gaps (0-10, 10-20, 20-30, 30-40, 40-50, 50-60, 60-70, 70-80, 80-90, 90-100). Each individual is assigned to a religion group based on the religion attribute. Each individual is assigned to a particular Caste based on the caste attribute. Each individual is assigned a job-label on the basis of activity status class IPU: def preprocess_households_samples_ihds(self,filtered_ihds_households_data : DataFrame ) -> DataFrame : This function preprocesses the household samples of the raw IHDS data. The attributes provided by IHDS_Survey are remapped to give clearer variable names to the attributes. Households are classified on the basis of rural/urban status. Households are classified on the basis of household size. class IPU: def load_marginals(self,householdh_marginal_filename:str, individuals_marginal_filename:str, individuals_data:DataFrame, households_data:DataFrame) -> Tuple(DataFrame,DataFrame,list) : This function loads and preprocesses the households and individual marginals from the respective files. class IPU: def generate_data(self,householdh_marginal_filename:str, filtered_ihds_individuals_data: DataFrame, filtered_ihds_households_data: DataFrame, householdh_marginal_filename: str, individuals_marginal_filename: str) -> Tuple(DataFrame,DataFrame,DataFrame) : This function generates the synthetic population data from the marginal files and the ihds data.","title":"IPU : Iterative Proportional Updating"},{"location":"GS/Installation/","text":"Getting Started How to run Synthpop locally. System Requirements Python 3 Cloning the main repository git clone https://github.com/sert121/bharatsim_code or visit [GitHub] Install project dependencies pip install -r requirements.txt Install in a virtual environment Create a virtual environment at the project root - this is used to isolate project packages from the global packages. $ python3 -m venv venv $ source venv/bin/activate $ pip install -r requirements.txt Installing Python","title":"Getting Started"},{"location":"GS/Installation/#getting-started","text":"How to run Synthpop locally.","title":"Getting Started"},{"location":"GS/Installation/#system-requirements","text":"Python 3","title":"System Requirements"},{"location":"GS/Installation/#cloning-the-main-repository","text":"git clone https://github.com/sert121/bharatsim_code or visit [GitHub]","title":"Cloning the main repository"},{"location":"GS/Installation/#install-project-dependencies","text":"pip install -r requirements.txt","title":"Install project dependencies"},{"location":"GS/Installation/#install-in-a-virtual-environment","text":"Create a virtual environment at the project root - this is used to isolate project packages from the global packages. $ python3 -m venv venv $ source venv/bin/activate $ pip install -r requirements.txt","title":"Install in a virtual environment"},{"location":"GS/Installation/#installing-python","text":"","title":"Installing Python"},{"location":"GS/PDS/","text":"Population Density Sampling population_density_sampler.py houses the following functions for population density sampling. class PopulationDensitySampler: def __init__(self, population_density_filename:str) : This class is used to sample the population density from the population density file. Loads the population density file class PopulationDensitySampler: def add_point(self, latitude:float, longitude:float) : Adds new points to the population density file class PopulationDensitySampler: def get_lat_long_samples(self, n, polygon) : Samples points from a given polygon file in accordance to the population density","title":"population_density_sampler.py"},{"location":"GS/PDS/#population-density-sampling","text":"population_density_sampler.py houses the following functions for population density sampling. class PopulationDensitySampler: def __init__(self, population_density_filename:str) : This class is used to sample the population density from the population density file. Loads the population density file class PopulationDensitySampler: def add_point(self, latitude:float, longitude:float) : Adds new points to the population density file class PopulationDensitySampler: def get_lat_long_samples(self, n, polygon) : Samples points from a given polygon file in accordance to the population density","title":"Population Density Sampling"},{"location":"GS/Places/","text":"class Places: def __init__(self, city_id:int, city_population:int, n_process:int=1): def generate_workplaces(self, workplace_type_list:list): This function generates the workplaces for the city with the help of lat-long attributes. class Places: def generate_schools(self): This function generates the schools for the city with the help of lat-long, workplace attributes.","title":"places.py"},{"location":"GS/configuration/","text":"Configuration Setting the Data sources Synthpop uses data from different sources to generate the synthetic population. The data sources are: IHDS Human survey data, 2011 [Source] [Download] Census Survey of India [Source] [Download] Preprocessing the Data coming soon Installing the requirements pip install -r requirements.txt to install the required dependencies for the project. Once you're set, you should be able to see the following files: - synthpop.py : Starter file - IPU.py : IPU(Iterative Proportional Updating) algorithm - age-height-weight.py : Adding age/height attributes on the base-population - HlatHlongaddition.py : Adding household attributes on the base-population - places.py : Adding places attributes on the base-population - population_density_sampler.py : Helper file for sampling the population","title":"Configuration"},{"location":"GS/configuration/#configuration","text":"","title":"Configuration"},{"location":"GS/configuration/#setting-the-data-sources","text":"Synthpop uses data from different sources to generate the synthetic population. The data sources are: IHDS Human survey data, 2011 [Source] [Download] Census Survey of India [Source] [Download]","title":"Setting the Data sources"},{"location":"GS/configuration/#preprocessing-the-data","text":"coming soon","title":"Preprocessing the Data"},{"location":"GS/configuration/#installing-the-requirements","text":"pip install -r requirements.txt to install the required dependencies for the project. Once you're set, you should be able to see the following files: - synthpop.py : Starter file - IPU.py : IPU(Iterative Proportional Updating) algorithm - age-height-weight.py : Adding age/height attributes on the base-population - HlatHlongaddition.py : Adding household attributes on the base-population - places.py : Adding places attributes on the base-population - population_density_sampler.py : Helper file for sampling the population","title":"Installing the requirements"},{"location":"GS/latlong/","text":"Adding Houshold Latitude and Longitude class HLatHlongAgeAddition: def __init__( self, admin_units_geojson_filename:str, admin_units_population_filename:str, population_density_filename:str, ): def perform_transforms(self, synthetic_population:DataFrame, synthetic_households:DataFrame) -> DataFrame:","title":"HlatHlongaddition.py"},{"location":"GS/latlong/#adding-houshold-latitude-and-longitude","text":"class HLatHlongAgeAddition: def __init__( self, admin_units_geojson_filename:str, admin_units_population_filename:str, population_density_filename:str, ): def perform_transforms(self, synthetic_population:DataFrame, synthetic_households:DataFrame) -> DataFrame:","title":"Adding Houshold Latitude and Longitude"},{"location":"GS/run-pipeline-1/","text":"1. Loading the data from IHDS and Census survey of India householdh_marginal_filename = \"path_to_household_marginals\" individuals_marginal_filename = \"path_to_individual_marginals\" ihds_individuals_filename = \"path_to/36151-0001-Data.tsv\" ihds_household_filename = \"path_to/36151-0002-Data.tsv\" 2. Geojson Spatial Data Setting the data sources for geojson spatial data for wards. Current source: [Municipal Spatial Data] This Repository will contain the spatial data of all the Municipalities that has been scraped from their websites and other sources. Do note, that the wards in these datasets, are usually the Municipal wards, and not the Census wards. Geojson ward names should match with the ward names in the ward-wise population file (See Next Steps), so that one can use it as a primary key. If they don't match please rename them accordingly.For example if the ward name in geojson is Ward-1 and in population file is Ward 1 , then rename it to Ward-1 in the population file. # Example geojson using Kolkata as the city admin_units_geojson_filename = \"https://raw.githubusercontent.com/datameet/Municipal_Spatial_Data/master/Kolkata/kolkata.geojson\" 3. Loading the Population Density Data Current source for population density data: [Link] [Note: Please unzip to access the .csv file] population_density_filename = \"/path_to/ind_pd_2020_1km_ASCII_XYZ.csv\" 4. Loading ward wise population admin_units_population_filename=\"path_to_file\" #after loading the data, one can specify the total population of each ward using column name TOT_P in their respective datadrames Current Source for ward-wise population: CensusGov To get ward wise lat-long, one can use either of the following sources: https://github.com/geopy/geopy https://www.mapmyindia.com/api https://developers.google.com/maps/documentation/geocoding/overview Next we would merge the ward-wise population with the lat-long data (keeping Ward Name/no. as the unique key) Sample Format : Ward Latitude Longitude TOT_P Kolkata Ward 2 88.34 83.34 111000 Kolkata Ward 3 85.33 89.77 99991 5. Setting the state and district ID State and district ID can be found out using Census MetaData found [here] . # select state id state_id = 19 # West Bengal #Select distid within state district_ids = [17] # Kolkata","title":"Set Data Sources"},{"location":"GS/run-pipeline-1/#1-loading-the-data-from-ihds-and-census-survey-of-india","text":"householdh_marginal_filename = \"path_to_household_marginals\" individuals_marginal_filename = \"path_to_individual_marginals\" ihds_individuals_filename = \"path_to/36151-0001-Data.tsv\" ihds_household_filename = \"path_to/36151-0002-Data.tsv\"","title":"1. Loading the data from IHDS and Census survey of India"},{"location":"GS/run-pipeline-1/#2-geojson-spatial-data","text":"Setting the data sources for geojson spatial data for wards. Current source: [Municipal Spatial Data] This Repository will contain the spatial data of all the Municipalities that has been scraped from their websites and other sources. Do note, that the wards in these datasets, are usually the Municipal wards, and not the Census wards. Geojson ward names should match with the ward names in the ward-wise population file (See Next Steps), so that one can use it as a primary key. If they don't match please rename them accordingly.For example if the ward name in geojson is Ward-1 and in population file is Ward 1 , then rename it to Ward-1 in the population file. # Example geojson using Kolkata as the city admin_units_geojson_filename = \"https://raw.githubusercontent.com/datameet/Municipal_Spatial_Data/master/Kolkata/kolkata.geojson\"","title":"2. Geojson Spatial Data"},{"location":"GS/run-pipeline-1/#3-loading-the-population-density-data","text":"Current source for population density data: [Link] [Note: Please unzip to access the .csv file] population_density_filename = \"/path_to/ind_pd_2020_1km_ASCII_XYZ.csv\"","title":"3. Loading the Population Density Data"},{"location":"GS/run-pipeline-1/#4-loading-ward-wise-population","text":"admin_units_population_filename=\"path_to_file\" #after loading the data, one can specify the total population of each ward using column name TOT_P in their respective datadrames Current Source for ward-wise population: CensusGov To get ward wise lat-long, one can use either of the following sources: https://github.com/geopy/geopy https://www.mapmyindia.com/api https://developers.google.com/maps/documentation/geocoding/overview Next we would merge the ward-wise population with the lat-long data (keeping Ward Name/no. as the unique key) Sample Format : Ward Latitude Longitude TOT_P Kolkata Ward 2 88.34 83.34 111000 Kolkata Ward 3 85.33 89.77 99991","title":"4. Loading ward wise population"},{"location":"GS/run-pipeline-1/#5-setting-the-state-and-district-id","text":"State and district ID can be found out using Census MetaData found [here] . # select state id state_id = 19 # West Bengal #Select distid within state district_ids = [17] # Kolkata","title":"5. Setting the state and district ID"},{"location":"GS/run-pipeline-2/","text":"Preprocessing 6. Filtering the IHDS data # state and district id can be found out using census metadata import pandas as pd ihds_individuals_data = pd.read_csv(ihds_individuals_filename, sep='\\t') filtered_ihds_individuals_data = ihds_individuals_data.loc[ihds_individuals_data.STATEID==state_id] filtered_ihds_individuals_data = filtered_ihds_individuals_data[filtered_ihds_individuals_data['DISTID'].apply(lambda x : x in district_ids)] ihds_households_data = pd.read_csv(ihds_household_filename, sep='\\t') filtered_ihds_households_data = ihds_households_data.loc[ihds_households_data.STATEID==state_id] filtered_ihds_households_data = filtered_ihds_households_data[filtered_ihds_households_data['DISTID'].apply(lambda x : x in district_ids)] #Reading and filtering survey sample data","title":"Preprocess Data"},{"location":"GS/run-pipeline-2/#preprocessing","text":"","title":"Preprocessing"},{"location":"GS/run-pipeline-2/#6-filtering-the-ihds-data","text":"# state and district id can be found out using census metadata import pandas as pd ihds_individuals_data = pd.read_csv(ihds_individuals_filename, sep='\\t') filtered_ihds_individuals_data = ihds_individuals_data.loc[ihds_individuals_data.STATEID==state_id] filtered_ihds_individuals_data = filtered_ihds_individuals_data[filtered_ihds_individuals_data['DISTID'].apply(lambda x : x in district_ids)] ihds_households_data = pd.read_csv(ihds_household_filename, sep='\\t') filtered_ihds_households_data = ihds_households_data.loc[ihds_households_data.STATEID==state_id] filtered_ihds_households_data = filtered_ihds_households_data[filtered_ihds_households_data['DISTID'].apply(lambda x : x in district_ids)] #Reading and filtering survey sample data","title":"6. Filtering the IHDS data"},{"location":"GS/run-pipeline-3/","text":"IPU 7. Generating the base population using Iterative Proportional Updating (IPU) ###IPU Step from IPU import IPU ipu_object = IPU() #passing all requirements to the IPU function synthetic_households, synthetic_individuals, synthetic_stats = ipu_object.generate_data(filtered_ihds_individuals_data, filtered_ihds_households_data, householdh_marginal_filename, individuals_marginal_filename) ###IPU Step","title":"IPU"},{"location":"GS/run-pipeline-3/#ipu","text":"","title":"IPU"},{"location":"GS/run-pipeline-3/#7-generating-the-base-population-using-iterative-proportional-updating-ipu","text":"###IPU Step from IPU import IPU ipu_object = IPU() #passing all requirements to the IPU function synthetic_households, synthetic_individuals, synthetic_stats = ipu_object.generate_data(filtered_ihds_individuals_data, filtered_ihds_households_data, householdh_marginal_filename, individuals_marginal_filename) ###IPU Step","title":"7. Generating the base population using Iterative Proportional Updating (IPU)"},{"location":"GS/run-pipeline-4/","text":"8. Adding additional features to the base population Adding Household coordinates (latitude,longitude) to the base population # admin_units_geojson_filename, admin_units_population_filename, population_density_filename have been defined in the first step (LoadData) hlat_hlong_age_object = HLatHlongAgeAddition(admin_units_geojson_filename, admin_units_population_filename, population_density_filename) hlat_hlong_age_object.admin_units['WARD']= hlat_hlong_age_object.admin_units['WARD'].astype(int) # perform_transforms() returns the modified base population new_synthetic_population = hlat_hlong_age_object.perform_transforms(synthetic_individuals, synthetic_households) Adding age, height ,weight attributes to the base population #loading dta IHDS data path_to_ihds_data_DTA = \"path_to_IHDS_data[DTA format]\" # adding height weight and age new_synthetic_population = age_height_weight(output_file_name,path_to_ihds_data_DTA) Source to Current IHDS_DTA_data here You can find more details about the IHDS data format here","title":"Add Features to the Base Population"},{"location":"GS/run-pipeline-4/#8-adding-additional-features-to-the-base-population","text":"Adding Household coordinates (latitude,longitude) to the base population # admin_units_geojson_filename, admin_units_population_filename, population_density_filename have been defined in the first step (LoadData) hlat_hlong_age_object = HLatHlongAgeAddition(admin_units_geojson_filename, admin_units_population_filename, population_density_filename) hlat_hlong_age_object.admin_units['WARD']= hlat_hlong_age_object.admin_units['WARD'].astype(int) # perform_transforms() returns the modified base population new_synthetic_population = hlat_hlong_age_object.perform_transforms(synthetic_individuals, synthetic_households) Adding age, height ,weight attributes to the base population #loading dta IHDS data path_to_ihds_data_DTA = \"path_to_IHDS_data[DTA format]\" # adding height weight and age new_synthetic_population = age_height_weight(output_file_name,path_to_ihds_data_DTA) Source to Current IHDS_DTA_data here You can find more details about the IHDS data format here","title":"8. Adding additional features to the base population"},{"location":"GS/run-pipeline-5/","text":"9. Results Saving the final population file. #saving file new_synthetic_population.to_csv(output_file_name, index=False) #exporting the file new_synthetic_population.to_csv(\"output_filename.csv\", index=False)","title":"Results"},{"location":"GS/run-pipeline-5/#9-results","text":"Saving the final population file. #saving file new_synthetic_population.to_csv(output_file_name, index=False) #exporting the file new_synthetic_population.to_csv(\"output_filename.csv\", index=False)","title":"9. Results"},{"location":"GS/run-pipeline-6/","text":"10. [Optional] Additional Attributes - Jobs under progress 11. [Optional] Additional Attributes - Places The Places class helps us assign workplaces, schools and public places. # from places.py import Places class from places import Places places_object = Places(1, len(synthetic_population), n_processes) synthetic_population.drop(synthetic_population.columns[0], axis=1, inplace=True) synthetic_population.drop(synthetic_population.columns[0], axis=1, inplace=True) synthetic_population places_object.generate_workplaces(list(synthetic_population[\"JobLabel\"])) places_object.generate_schools() places_object.generate_public_places() adults = synthetic_population[synthetic_population[\"age\"] > 18] adults = places_object.assign_workplaces(adults) children = synthetic_population[synthetic_population[\"age\"] < 19] children = places_object.assign_schools(children) total_population = pd.concat([adults, children], axis=0) total_population = places_object.assign_public_places(total_population)","title":"Adding Optional Attributes to the Base Population"},{"location":"GS/run-pipeline-6/#10-optional-additional-attributes-jobs","text":"under progress","title":"10. [Optional] Additional Attributes - Jobs"},{"location":"GS/run-pipeline-6/#11-optional-additional-attributes-places","text":"The Places class helps us assign workplaces, schools and public places. # from places.py import Places class from places import Places places_object = Places(1, len(synthetic_population), n_processes) synthetic_population.drop(synthetic_population.columns[0], axis=1, inplace=True) synthetic_population.drop(synthetic_population.columns[0], axis=1, inplace=True) synthetic_population places_object.generate_workplaces(list(synthetic_population[\"JobLabel\"])) places_object.generate_schools() places_object.generate_public_places() adults = synthetic_population[synthetic_population[\"age\"] > 18] adults = places_object.assign_workplaces(adults) children = synthetic_population[synthetic_population[\"age\"] < 19] children = places_object.assign_schools(children) total_population = pd.concat([adults, children], axis=0) total_population = places_object.assign_public_places(total_population)","title":"11. [Optional] Additional Attributes - Places"},{"location":"GS/run-pipeline/","text":"Pipeline The pipeline is divided into the following steps: Set Data Sources Preprocess Data IPU Addition of Features to the Base Population Result and Sanity checks","title":"Run pipeline"},{"location":"GS/run-pipeline/#pipeline","text":"The pipeline is divided into the following steps: Set Data Sources Preprocess Data IPU Addition of Features to the Base Population Result and Sanity checks","title":"Pipeline"},{"location":"GS/synthpop/","text":"Starter This covers the documentation for the synthpop.py file Description synthpop.py can be seen as the controller of the entire pipeline. It is responsible to chain the individual parts of the pipeline together. It controls the flow of the data through the following steps: Loading data Preprocessing IPU instance generation Synthetic data generation Feature addition Data evaluation Data export Each step is controlled by a separate file/module listed below: IPU.py population_density_sampler.py HlatHlongAddition.py places.py age_height_weight.py","title":"synthpop.py"},{"location":"GS/synthpop/#starter","text":"This covers the documentation for the synthpop.py file","title":"Starter"},{"location":"GS/synthpop/#description","text":"synthpop.py can be seen as the controller of the entire pipeline. It is responsible to chain the individual parts of the pipeline together. It controls the flow of the data through the following steps: Loading data Preprocessing IPU instance generation Synthetic data generation Feature addition Data evaluation Data export Each step is controlled by a separate file/module listed below: IPU.py population_density_sampler.py HlatHlongAddition.py places.py age_height_weight.py","title":"Description"},{"location":"tutorial/Getting%20Started/","text":"Getting Started Setup","title":"Getting Started"},{"location":"tutorial/Getting%20Started/#getting-started","text":"","title":"Getting Started"},{"location":"tutorial/Getting%20Started/#setup","text":"","title":"Setup"},{"location":"tutorial/advanced/","text":"Advanced Beyond the basic configuration and content Once you've got the Set up Project section, you can customize further using this guide. Or skip this and go to Usage . Navbar nesting You can add an additional level to your navbar like this: nav: - Home: index.md - About: about.md - Foo: - Overview: foo/index.md - Bar: foo/bar.md The value can either be a string (as in the first case) or a map (as in the last case). This seems to be a YAML limitation but see also issue #1139 . Add config options See Configuration page on MkDocs site for options. Separate docs directory approach You can also structure your project to have the set up above nested inside a docs directory. This is useful you have a few other directories and you want to keep the project root clean. docs/ docs/ index.md theme/ main.html nav.html toc.html mkdocs.yml An example of this is the Poetry repo. That project is also how I got into MkDocs in the first place. Embedding To embed a gist, just copy and paste the embed script URL which is provided on a gist. e.g. <script src=\"https://gist.github.com/MichaelCurrin/57caae30bd7b0991098e9804a9494c23.js\"></script>","title":"Advanced"},{"location":"tutorial/advanced/#advanced","text":"Beyond the basic configuration and content Once you've got the Set up Project section, you can customize further using this guide. Or skip this and go to Usage .","title":"Advanced"},{"location":"tutorial/advanced/#navbar-nesting","text":"You can add an additional level to your navbar like this: nav: - Home: index.md - About: about.md - Foo: - Overview: foo/index.md - Bar: foo/bar.md The value can either be a string (as in the first case) or a map (as in the last case). This seems to be a YAML limitation but see also issue #1139 .","title":"Navbar nesting"},{"location":"tutorial/advanced/#add-config-options","text":"See Configuration page on MkDocs site for options.","title":"Add config options"},{"location":"tutorial/advanced/#separate-docs-directory-approach","text":"You can also structure your project to have the set up above nested inside a docs directory. This is useful you have a few other directories and you want to keep the project root clean. docs/ docs/ index.md theme/ main.html nav.html toc.html mkdocs.yml An example of this is the Poetry repo. That project is also how I got into MkDocs in the first place.","title":"Separate docs directory approach"},{"location":"tutorial/advanced/#embedding","text":"To embed a gist, just copy and paste the embed script URL which is provided on a gist. e.g. <script src=\"https://gist.github.com/MichaelCurrin/57caae30bd7b0991098e9804a9494c23.js\"></script>","title":"Embedding"},{"location":"tutorial/deploy/","text":"Deploy Build and deploy to a remote public site See Deploying Your Docs on the Mkdocs site for more details. GitHub Pages How to deploy your docs site to GitHub Pages. Follow one of the approaches below: Run deploy command - Run a MkDocs CLI command locally to deploy. Deploy with GitHub Actions - Use the project's CI workflow in the cloud to build and deploy to GH Pages on commits pushed to master. Then go to your repo's Settings and Pages then enable GitHub Pages on the gh-pages branch's root. Note this is for a Project Page on a subpath, you will have to make adjustments to the command below if you want an Organization or User Page on the root path. Run deploy command Run a MkDocs CLI command locally to deploy MkDocs needs to know where to publish commits on GitHub - so make sure you are working with a repo that you cloned, or that you initialize the local repo and add a remote repo. Run this command locally: $ make d That will use Makefile to run the following: $ mkdocs gh-deploy --strict --force That will do the following: Clean and build to site directory. Force push to gh-pages branch, overwriting any changes which were pushed from another build. Then go to your repo on GitHub, look at the Environment tab. When it is done building, click View deployment to see your site. e.g. michaelcurrin.github.io/mkdocs-quickstart/ See deploy options in the help: $ mkdocs gh-deploy --help Deploy with GitHub Actions Set up continuous deployment config to enable deploys on a change to files on GitHub When you make changes to your docs config or the docs directory, especially editing on GitHub directly, it's often useful to have the docs site build and deploy automatically in a remote environment. This is provided for free by GitHub. See the docs.yml workflow provided with this project. You don't have to change anything there. The token will be generated for you by GitHub Actions.","title":"Deploy"},{"location":"tutorial/deploy/#deploy","text":"Build and deploy to a remote public site See Deploying Your Docs on the Mkdocs site for more details.","title":"Deploy"},{"location":"tutorial/deploy/#github-pages","text":"How to deploy your docs site to GitHub Pages. Follow one of the approaches below: Run deploy command - Run a MkDocs CLI command locally to deploy. Deploy with GitHub Actions - Use the project's CI workflow in the cloud to build and deploy to GH Pages on commits pushed to master. Then go to your repo's Settings and Pages then enable GitHub Pages on the gh-pages branch's root. Note this is for a Project Page on a subpath, you will have to make adjustments to the command below if you want an Organization or User Page on the root path.","title":"GitHub Pages"},{"location":"tutorial/deploy/#run-deploy-command","text":"Run a MkDocs CLI command locally to deploy MkDocs needs to know where to publish commits on GitHub - so make sure you are working with a repo that you cloned, or that you initialize the local repo and add a remote repo. Run this command locally: $ make d That will use Makefile to run the following: $ mkdocs gh-deploy --strict --force That will do the following: Clean and build to site directory. Force push to gh-pages branch, overwriting any changes which were pushed from another build. Then go to your repo on GitHub, look at the Environment tab. When it is done building, click View deployment to see your site. e.g. michaelcurrin.github.io/mkdocs-quickstart/ See deploy options in the help: $ mkdocs gh-deploy --help","title":"Run deploy command"},{"location":"tutorial/deploy/#deploy-with-github-actions","text":"Set up continuous deployment config to enable deploys on a change to files on GitHub When you make changes to your docs config or the docs directory, especially editing on GitHub directly, it's often useful to have the docs site build and deploy automatically in a remote environment. This is provided for free by GitHub. See the docs.yml workflow provided with this project. You don't have to change anything there. The token will be generated for you by GitHub Actions.","title":"Deploy with GitHub Actions"},{"location":"tutorial/installation/","text":"Installation How to install MkDocs locally. Requirements Python 3","title":"Installation"},{"location":"tutorial/installation/#installation","text":"How to install MkDocs locally.","title":"Installation"},{"location":"tutorial/installation/#requirements","text":"Python 3","title":"Requirements"},{"location":"tutorial/setup-project/","text":"Set up project How to create a MkDocs site from scratch This is a summary of the tutorial on mkdocs.org . How to use this guide Use one of the approaches below: Create a quickstart project with the new command covered in Create a starter site . Follow the extended guide to create a Set up up docs site by hand. Basic structure This is the simplest MkDocs site you can make: docs/ index.md - Homepage in the docs directory (by default). mkdocs.yml Config at the root - control appearance and navigation of your site. See this project's docs/mkdocs.yml file on GitHub. Notes on fields for the config: site_name - title of your site. site_description - used as a description for SEO and you could use it somewhere in your template. site_url - now a required field when running a deploy. Include the subpath on the domain. If your site is not ready to be hosted, set this field to an empty string. repo_url - for Edit on GitHub button. See docs . edit_uri - defaults to edit/master/docs/ , which includes docs directory of markdown files inside your repo root. But, if the site's root is in an outer docs directory, then you need to also add that, so paths do not break. e.g. edit/master/docs/docs . See docs Requirements file A requirements file is optional but it can make it easier to manage dependencies. If you choose not use the file, make sure pip install mkdocs and pip install THEME lines are your instructions. If you want to add, then include requirements.txt at the root. If your project is already a Python project, you might prefer to add mkdocs in requirements-dev.txt or at docs/requirements.txt to keep it isolated.This file should have mkdocs in it and also any themes if needed. Create a starter site Run this command to create a starter site. This make the steps below go quicker. cd my-project mkdocs new PATH The result will be same as the Basic structure defined above and will include minimal text content generated by the MkDocs CLI. This text is defined in the project's new.py module. Set up a docs site Tip: Optionally use the new command covered above to set up the config and index page first and then continue . Create doc pages. Create a docs directory. Create index.md as your homepage. Create other markdown pages (optional). Use placeholder content if you want to move on and then come back to expand them. If you have any existing markdown docs, these will work too. Set up config. Create mkdocs.yml at the project root. Set up a navbar there. Choose a theme. Create a favicon (optional). It will be picked up at this path: docs/img/favicon.ico . Add to your .gitignore . Add build directory. This will prevent it from being versioned on master branch. Add virtual environment, if using one. You project should now look this this: docs/ index.md More pages... mkdocs.yml .gitignore venv requirements.txt - optional Sample content Ignore file .gitignore site/ venv Navbar mkdocs.yml nav: - Home: index.md - About: about.md Themes Builtin Use a builtin theme that comes with MkDocs. The default. theme: mkdocs Using ReadTheDocs theme and alternative config syntax. theme: name: readthedocs Find more supported themes . If it doesn't immediately, you'll have to use pip to install it and add to a requirements.txt file. ReadTheDocs Dropdown theme See below using mkdocs-rtd-dropdown . requirements.txt : mkdocs-rtd-dropdown mkdocs.yml : theme: name: 'rtd-dropdown' Material for MkdDocs theme See the MkDocs for Material homepage. See the Set up page for config options. requirements.txt : mkdocs-material-extensions>=1.0 mkdocs.yml : theme: name: 'material'","title":"Set up project"},{"location":"tutorial/setup-project/#set-up-project","text":"How to create a MkDocs site from scratch This is a summary of the tutorial on mkdocs.org .","title":"Set up project"},{"location":"tutorial/setup-project/#how-to-use-this-guide","text":"Use one of the approaches below: Create a quickstart project with the new command covered in Create a starter site . Follow the extended guide to create a Set up up docs site by hand.","title":"How to use this guide"},{"location":"tutorial/setup-project/#basic-structure","text":"This is the simplest MkDocs site you can make: docs/ index.md - Homepage in the docs directory (by default). mkdocs.yml Config at the root - control appearance and navigation of your site. See this project's docs/mkdocs.yml file on GitHub. Notes on fields for the config: site_name - title of your site. site_description - used as a description for SEO and you could use it somewhere in your template. site_url - now a required field when running a deploy. Include the subpath on the domain. If your site is not ready to be hosted, set this field to an empty string. repo_url - for Edit on GitHub button. See docs . edit_uri - defaults to edit/master/docs/ , which includes docs directory of markdown files inside your repo root. But, if the site's root is in an outer docs directory, then you need to also add that, so paths do not break. e.g. edit/master/docs/docs . See docs","title":"Basic structure"},{"location":"tutorial/setup-project/#requirements-file","text":"A requirements file is optional but it can make it easier to manage dependencies. If you choose not use the file, make sure pip install mkdocs and pip install THEME lines are your instructions. If you want to add, then include requirements.txt at the root. If your project is already a Python project, you might prefer to add mkdocs in requirements-dev.txt or at docs/requirements.txt to keep it isolated.This file should have mkdocs in it and also any themes if needed.","title":"Requirements file"},{"location":"tutorial/setup-project/#create-a-starter-site","text":"Run this command to create a starter site. This make the steps below go quicker. cd my-project mkdocs new PATH The result will be same as the Basic structure defined above and will include minimal text content generated by the MkDocs CLI. This text is defined in the project's new.py module.","title":"Create a starter site"},{"location":"tutorial/setup-project/#set-up-a-docs-site","text":"Tip: Optionally use the new command covered above to set up the config and index page first and then continue . Create doc pages. Create a docs directory. Create index.md as your homepage. Create other markdown pages (optional). Use placeholder content if you want to move on and then come back to expand them. If you have any existing markdown docs, these will work too. Set up config. Create mkdocs.yml at the project root. Set up a navbar there. Choose a theme. Create a favicon (optional). It will be picked up at this path: docs/img/favicon.ico . Add to your .gitignore . Add build directory. This will prevent it from being versioned on master branch. Add virtual environment, if using one. You project should now look this this: docs/ index.md More pages... mkdocs.yml .gitignore venv requirements.txt - optional","title":"Set up a docs site"},{"location":"tutorial/setup-project/#sample-content","text":"","title":"Sample content"},{"location":"tutorial/setup-project/#ignore-file","text":".gitignore site/ venv","title":"Ignore file"},{"location":"tutorial/setup-project/#navbar","text":"mkdocs.yml nav: - Home: index.md - About: about.md","title":"Navbar"},{"location":"tutorial/setup-project/#themes","text":"","title":"Themes"},{"location":"tutorial/setup-project/#builtin","text":"Use a builtin theme that comes with MkDocs. The default. theme: mkdocs Using ReadTheDocs theme and alternative config syntax. theme: name: readthedocs Find more supported themes . If it doesn't immediately, you'll have to use pip to install it and add to a requirements.txt file.","title":"Builtin"},{"location":"tutorial/setup-project/#readthedocs-dropdown-theme","text":"See below using mkdocs-rtd-dropdown . requirements.txt : mkdocs-rtd-dropdown mkdocs.yml : theme: name: 'rtd-dropdown'","title":"ReadTheDocs Dropdown theme"},{"location":"tutorial/setup-project/#material-for-mkddocs-theme","text":"See the MkDocs for Material homepage. See the Set up page for config options. requirements.txt : mkdocs-material-extensions>=1.0 mkdocs.yml : theme: name: 'material'","title":"Material for MkdDocs theme"},{"location":"tutorial/tldr/","text":"TL;DR A simplified version of the tutorial. Local setup Install pip install mkdocs Set up project mkdocs new . or Run mkdocs serve View on localhost:8000 Deploy to remote site Run deploy command locally Deploy to GitHub Pages mkdocs gh-deploy View published site on GitHub Pages at https://USERNAME.github.io/REPO-NAME/ Run continuous integration For CI/CD deploy, use GitHub Actions with an action such as Deploy MkDocs . Or use Netlify. This is not covered in this tutorial.","title":"TL;DR"},{"location":"tutorial/tldr/#tldr","text":"A simplified version of the tutorial.","title":"TL;DR"},{"location":"tutorial/tldr/#local-setup","text":"Install pip install mkdocs Set up project mkdocs new . or Run mkdocs serve View on localhost:8000","title":"Local setup"},{"location":"tutorial/tldr/#deploy-to-remote-site","text":"","title":"Deploy to remote site"},{"location":"tutorial/tldr/#run-deploy-command-locally","text":"Deploy to GitHub Pages mkdocs gh-deploy View published site on GitHub Pages at https://USERNAME.github.io/REPO-NAME/","title":"Run deploy command locally"},{"location":"tutorial/tldr/#run-continuous-integration","text":"For CI/CD deploy, use GitHub Actions with an action such as Deploy MkDocs . Or use Netlify. This is not covered in this tutorial.","title":"Run continuous integration"},{"location":"tutorial/usage/","text":"Usage Run synthpop locally | Please configure the data-sources, and check file structure before running the code. Build python3 run synthpop.py","title":"Usage"},{"location":"tutorial/usage/#usage","text":"Run synthpop locally | Please configure the data-sources, and check file structure before running the code.","title":"Usage"},{"location":"tutorial/usage/#build","text":"python3 run synthpop.py","title":"Build"}]}